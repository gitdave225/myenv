AWSTemplateFormatVersion: '2010-09-09'
Description: Onica DevOps Test 2.1 Bastion Host Stack

Parameters:
  MyIPAddr:
    Type: String
    Default: '87.101.95.8/32'
 
  Env:
    Type: String
    Default: sandbox
    AllowedValues:
      - prod
      - nonprod
      - sandbox
    Description: 'Deployment Environment'

  ContactInfo:
    Type: String
    Default: 'VPC Group'
    Description: 'Contact for VPC'

  ContactEmail:
    Type: String
    Default: 'vpcgroup@company.info'
    Description: 'Contact email for VPC'

  ClientKey:
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  MapRegion:
    us-east-1:
      Name: ue1
    us-west-2:
      Name: uw2
  ApprovedAMIs:
    us-east-1:
      ID: ami-0de53d8956e8dcf80
    us-west-2:
      ID: ami-061392db613a6357b

Resources:
  BastionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: !Join
          - '-'
          - -  !FindInMap [MapRegion, !Ref 'AWS::Region', Name]
            -  !Ref Env
            - 'bastion-client-role'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: 'Allow'
                Action:
                  - ec2:describe*
                  - ec2:createtags*
                  - ec2:DescribeInstanceStatus
                Resource: '*'
              -
                Effect: 'Allow'
                Action:
                  - s3:locate*
                  - s3:list*
                  - s3:get*
                Resource: '*'
              -
                Effect: 'Allow'
                Action:
                  - cloudwatch:get*
                  - cloudwatch:describe*
                  - cloudwatch:list*
                Resource: '*'

  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: BastionRole
    Properties:
      Roles:
        - !Ref BastionRole

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId:
        Fn::ImportValue: !Sub
        - '${mapregion}-VPC-VPCID'
        - { mapregion: !FindInMap [MapRegion, !Ref 'AWS::Region', Name] }
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref MyIPAddr
          FromPort: '22'
          ToPort: '22'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
          FromPort: '0'
          ToPort: '65535'
      Tags:
        - Key: Name
          Value: client-BastionSG
        - Key: ContactInfo
          Value: !Ref ContactInfo
        - Key: ContactEmail
          Value: !Ref ContactEmail
        - Key: Environment
          Value: !Ref Env
        - Key: Tool
          Value: CFN

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref BastionInstanceProfile
      ImageId: !FindInMap [ ApprovedAMIs, !Ref 'AWS::Region', ID ]
      InstanceType: 't2.micro'
      KeyName: !Ref ClientKey
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId:
            Fn::ImportValue: !Sub
            - '${mapregion}-VPC-FE2'
            - { mapregion: !FindInMap [MapRegion, !Ref 'AWS::Region', Name] }
          GroupSet:
            - !Ref BastionSG
      Tags:
        - Key: Name
          Value: 'Client Bastion Host'
        - Key: ContactInfo
          Value: !Ref ContactInfo
        - Key: ContactEmail
          Value: !Ref ContactEmail
        - Key: Environment
          Value: !Ref Env
        - Key: Tool
          Value: CFN
      UserData:
        !Base64 |
          #!/bin/bash
          sudo yum update -y

Outputs:
  BastionSG:
    Description: Management Security Group
    Value: !Ref BastionSG
    Export:
      Name: !Sub "${AWS::StackName}-Bastion-SG"
